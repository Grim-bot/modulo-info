#!/bin/bash

# Run this in verbose more with 'VERBOSE=1 <script>'
VERBOSE=${VERBOSE:-0}

# We assume this script is in a subdirectory of the root dir
helper_dir=$(dirname "$0")
helper_dir=$(cd "$helper_dir"; basename "$(pwd)")
root_dir="$(dirname "$0")/.."
root_dir=$(cd "$root_dir"; pwd)
helper_dir="${root_dir}/${helper_dir}"
additional_files_dir="${helper_dir}/additionalfiles"

# Show some info if in verbose mode
if [ $VERBOSE -eq 1 ]; then
    echo "Running in verbose mode"
    echo "Root dir:   $root_dir"
    echo "Helper dir: $helper_dir"
    echo
fi


abort() {
    # use first param as message with default value
    local msg=${1:-"(unspecified error, see above)"}
    # echo in bold with red background
    echo -e "\033[1;41m ERROR: $msg \033[0m"
    exit 1
}

completed() {
    local msg=${1:-"(unspecified error, see above)"}
    # echo in bold with red background
    echo -e "\033[1;42m DONE:  $msg \033[0m"
}

run() {
    local opname="$1"
    shift
    local cmd="$@"
    # echo in bold with blue background
    echo -e "\033[1;44m START: $opname \033[0m"
    eval $cmd || abort "operation failed '$opname', see above"
    # echo in bold with green background if no abort
    completed "$opname"
    echo
    echo
}


last_fasttrack_commit="${helper_dir}/last_fasttrack_commit.txt"
last_devmerge_commit="${helper_dir}/last_devmerge_commit.txt"


fasttrack-check() {
    # check if file exists
    if [ ! -f "$last_fasttrack_commit" ]; then
        abort "No trace of previous fasttrack; file ${last_fasttrack_commit#"$root_dir/"} does not exist"
    fi

    echo "This is the last commit on dev that was inspected at the last fasttrack:"
    echo -n "  "
    # remove comments and empty lines
    cat "$last_fasttrack_commit" | grep -v '#' | grep -v '^$'
}


commit-save() {
    type="$1"
    target_file="$2"
    explanation_text="$3"

    # check if there are any changes to commit
    git diff --cached --exit-code > /dev/null
    if [ $? -ne 0 ]; then abort "Please commit staged changes first as this action will create a new commit"; fi

    # Assuming everything has been pulled, find last commit on dev branch now
    GIT_PAGER=cat last_dev_commit=$(git log dev -1 --pretty="format:%h  %ci  %an  %s")
    echo "This commit from dev will be referenced for '${type}':"
    echo "  $last_dev_commit"
    # ask to confirm waiting for newline
    read -p "Do you want to save this commit to the control file? (y/n) " -r
    [[ ! $REPLY =~ ^[Yy]$ ]] && abort "User cancelled"

    git_username=$(git config user.name)
    git_email=$(git config user.email)
    date_time_iso=$(date -Iseconds)
    timestamp="\n\nFile updated on ${date_time_iso} by ${git_username} <${git_email}>"

    # save to file
    echo -e $explanation_text > "$target_file"
    echo $last_dev_commit    >> "$target_file"
    echo -e $timestamp       >> "$target_file"
    completed "Saved to file $target_file"

    git add "$target_file"
    echo "Please run: git commit -m \"New ${type} reference commit\""
}


fasttrack-save() {
    explanation_text=""
    explanation_text="${explanation_text}# This file shows the last commit on dev that has\n"
    explanation_text="${explanation_text}# been inspected for fasttrack and porting to master.\n"
    explanation_text="${explanation_text}# It does not mean all commits up to this one were\n"
    explanation_text="${explanation_text}# merged (this is done less often), neither that this\n"
    explanation_text="${explanation_text}# one itself was actually merged.\n"

    commit-save fasttrack "${last_fasttrack_commit}" "${explanation_text}"
}


devmerge-save() {
    explanation_text=""
    explanation_text="${explanation_text}# This file shows the last commit on dev that has\n"
    explanation_text="${explanation_text}# been merged into master. This does not mean that\n"
    explanation_text="${explanation_text}# no other commit from dev lives on master as they\n"
    explanation_text="${explanation_text}# can have been cherry-picked during the fasttrack\n"
    explanation_text="${explanation_text}# process to be quick to publish small changes.\n"

    commit-save devmerge "${last_devmerge_commit}" "${explanation_text}"
}


deploy-appr() {
    run "HTML build for 'appr'"  make web
    run "LaTeX build for 'appr'" make pdf
    run "Upload for 'appr'"      make upload
}

deploy-ens() {
    # check if user is defined with default deploy user
    SSH_USER=${SSH_USER:-31826_hep}

    # clear
    rm -rf "${root_dir}/build"
    web_build_dir="${root_dir}/build/ens"
    run "HTML build for 'ens'" sphinx-build -aE -b html src/ens "${web_build_dir}"

    server="31826.ftp.infomaniak.com"
    run "Upload for 'ens'"  rsync -avz --progress --delete "${web_build_dir}/"                 "${SSH_USER}@${server}:sites/enseigner.modulo-info.ch2/"
    run "Upload settings for 'ens'" rsync -avz --progress          "${additional_files_dir}/ens/" "${SSH_USER}@${server}:sites/enseigner.modulo-info.ch2/"

}


usage() {
    echo "Usage: $0 <command>  -or-  VERBOSE=1 $0 <command>"
    echo "Available commands are:"
    echo
    echo "  fasttrack-check  show the last commit on dev that was inspected"
    echo "                   at the last fasttrack"
    echo "  fasttrack-save   save into a file the current last commit on dev"
    echo "                   as the one inspected at the last fasttrack"
    echo
    echo "  devmerge-save    save into a file the current last commit on dev"
    echo "                   as the one last merged into master"
    echo
    echo "  deploy-appr      clean build and deploy the appr part"
    echo "  deploy-ens       clean build and deploy the ens part"
    echo "  deploy-both      clean build and deploy both paths"
    echo
    echo "  help             show this help"
    echo
}


test -d .env && source .env/bin/activate
test -d venv && source venv/bin/activate
test -d  env && source  env/bin/activate

command="$1"
case $command in
    fasttrack-check)
        fasttrack-check
        ;;

    fasttrack-save)
        fasttrack-save
        ;;

    devmerge-save)
        devmerge-save
        ;;

    deploy-appr)
        deploy-appr
        ;;

    deploy-ens)
        deploy-ens
        ;;

    deploy-both)
        deploy-appr
        deploy-ens
        ;;

    help)
        usage
        ;;

    *)
        usage
        abort "Unknown command '$command'. See usage above."
        ;;
esac

